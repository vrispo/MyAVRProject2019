#include "Bullet.s3d"

#define SWAT_START_WALK 16
#define SWAT_END_WALK 48
#define COLLISION_SCALE 0.80, 1.6, 0.80
#define FRONT_STEP 0.1
#define BACK_STEP 0.08
#define SIDE_STEP 0.05
#define FRAME_STEP 1.0
#define JUMP_HEIGHT 1.5
#define JUMP_STEP 0.05
#define Y_OFFSET [0.0, 0.1, 0.0]

var shoot_fx;
var step_fx;
var start_fx;
var level_obj_array;

var sound_played = false;

class Player{
	var lower_mesh;
	var upper_mesh;
	var collision_box;
	var rocket_mesh;
	var railgun_mesh;
	var rocket_obj;
	var railgun_obj;
	var railgun_equipped;
	var obj;
	var fp_obj;
	var collision_obj;
	var old_position;
	var position;
	var move;
	var angle_xz;
	var old_angle_xz;
	var angle_step;
	var strafe;
	var left_strafe;
	var right_strafe;
	var gaze;
	var direction;
	var jump_target;
	var last_frame;
	var current_frame;
	var run;
	var is_jumping;
	var is_ascending;
	var my_bullet;
	var has_shot;
	var color;
	
	init(col, pos, level_obj_l);
	draw();
	swapWeapon(num);
	fp_draw();
	isColliding();
	setPosition(pos);
	getYCollision();
	setRotation(angle_xz);
	update();
	enemyUpdate(epos, emove, eframe, eangle_xz);
	enemyInterpolate();
	wasd();
	jump();
	updateY();
};

function Player::init(col, pos, level_obj_l){
	level_obj_array = level_obj_l;
	
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf1 = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf1);
	collision_box = CVmNewMesh(VRP_CYLINDER);
	collision_box.scale(COLLISION_SCALE);
	var collision_box_transparent = CVmMaterial();
	collision_box_transparent.transparency = 0.0; //Set the collision box transparent
	collision_box.setMaterial(collision_box_transparent);
	rocket_mesh = CVmNewMesh("rocketl.aam");
	railgun_mesh = CVmNewMesh("railgun.aam");
	rocket_mesh.scale(sf1);
	railgun_mesh.scale(sf1);
	
	var lower_obj = CVmObj(lower_mesh);
	var upper_obj = CVmObj(upper_mesh);
	railgun_obj = CVmObj(railgun_mesh);
	rocket_obj = CVmObj(rocket_mesh);
	collision_obj = CVmObj(collision_box);
	obj = CVmObj();
	upper_obj.modulateMaterials(col);
	lower_obj.modulateMaterials(col);
	obj.addChild(upper_obj);
	obj.addChild(lower_obj);
	obj.addChild(railgun_obj);
	fp_obj = CVmObj();
	fp_obj.addChild(railgun_obj);
	fp_obj.addChild(rocket_obj);
	rocket_obj.hide();
	
	railgun_equipped = true;
	if (pos[0] == 2){
		angle_xz = 0.0;
		direction = [0.0, 0.0, 1.0];
	} else {
		angle_xz = PI;
		direction = [0.0, 0.0, -1.0];
	}
	angle_step = 0.0;
	old_angle_xz = 0.0;
	position = pos;
	move = [0.0, 0.0, 0.0];
	old_position = position;
	last_frame = 0;
	current_frame = SWAT_START_WALK;
	run = 1.0;
	color = col;
	jump_target = pos[1];
	is_jumping = false;
	is_ascending = false;
	has_shot = false;

	shoot_fx = CVmVRawAV("shoot.wav");
	step_fx = CVmVRawAV("step.wav");
	start_fx = CVmVRawAV("Start.wav");
	
	if (!sound_played){
		start_fx.play(); //So it doesn't block
		sound_played = true;
	}
		
}

function Player::draw(){
	obj.draw(VR_FRAMENUMBER, current_frame);
	collision_obj.draw();
}

function Player::swapWeapon(num){
	if (num == 2){
		railgun_obj.hide();		
		rocket_obj.unhide();
		railgun_equipped = false;
	} else {
		rocket_obj.hide();	
		railgun_obj.unhide();
		railgun_equipped = true;	
	}
}

function Player::fp_draw(){
	fp_obj.draw(VR_FRAMENUMBER, SWAT_START_WALK);
	collision_obj.draw();
}

function Player::isColliding(){
	foreach (var t in level_obj_array)
		if (collision_obj.isCollidingBBox(t))
			return true;			
	return false;
}

function Player::wasd(){
	var strafe = 1;	
	if (keyPressed("d")){
		strafe = 2;
		move = -(right_strafe * SIDE_STEP);
		position += move;
	} else if (keyPressed("a")){
		strafe = 2;
		move = -(left_strafe * SIDE_STEP);
		position += move;
	}
	// No else if because of diagonal movement	
	if (keyPressed("w")){
		move = (direction * (FRONT_STEP / strafe) * run);
		position += move;
		current_frame += FRAME_STEP;
		if (current_frame >= SWAT_END_WALK){
			current_frame = SWAT_START_WALK + 1;
			step_fx.play();
		}		
	} else if (keyPressed("s")){
		move = -(direction * (BACK_STEP / strafe));
		position += move;
		current_frame -= FRAME_STEP;
		if(current_frame <= SWAT_START_WALK){
			current_frame = SWAT_END_WALK - 1;
			step_fx.play();
		}
	} else if (strafe == 2){ // Manage animation for strafing only
		current_frame += FRAME_STEP;
		if (current_frame >= SWAT_END_WALK){
			current_frame = SWAT_START_WALK + 1;
			step_fx.play();
		}
	}
	
	if (!getYCollision())
		updateY();
}

function Player::jump(){
	is_jumping = true;
	is_ascending = true;
	jump_target = position.y + JUMP_HEIGHT;
}

function Player::updateY(){
	if (position.y < jump_target && is_ascending){
		move = [0.0, JUMP_STEP, 0.0];
		position += move;
	} else {
		is_ascending = false;
		if (position.y > 0.0){
			move = -[0.0, JUMP_STEP, 0.0];
			position += move;
		} else {
			position.y = 0.0;
			jump_target = 0.0;
			is_jumping = false;
		}
	}
}

function Player::setPosition(pos){
	obj.setPosition(pos);
	fp_obj.setPosition(pos);
	collision_obj.setPosition(pos);
}

function Player::getYCollision(){
	if (position.y == 0.0)
		return true;
	
	var check = false;
	
	collision_obj.setPosition(position - Y_OFFSET);
	collision_obj.draw();
	
	foreach (var t in level_obj_array)
		check = check || collision_obj.isCollidingBBox(t);
		
	collision_obj.setPosition(position);
	collision_obj.draw();
	
	return check;
}

function Player::setRotation(angle_xz){
	fp_obj.setRotation(angle_xz * 180.0 / PI, 0, 1, 0);
	obj.setRotation(angle_xz * 180.0 / PI, 0, 1, 0);
}

function Player::update(){
	fp_obj.hide();
	
	move = [0.0, 0.0, 0.0];
	
	if (!isColliding())
		old_position = position;
	
	if (keyPressed(VK_SHIFT)){
		run = 1.5;
	} else {
		run = 1.0;
	}
	
	if (keyPressed("e"))
		angle_xz -= 0.05;
	else if (keyPressed("q"))
		angle_xz += 0.05;
	
	gaze = [sin(angle_xz), 0, cos(angle_xz)];	
	direction = [gaze[0], 0, gaze[2]];
	
	var angle_xz_r = angle_xz + (PI / 2);
	var angle_xz_l = angle_xz - (PI / 2);
	right_strafe = [sin(angle_xz_r), 0.0, cos(angle_xz_r)];
	left_strafe = [sin(angle_xz_l), 0.0, cos(angle_xz_l)];
	
	wasd();
	if (keyPressed(VK_SPACE) && !is_jumping)
		jump();
	if (is_jumping)
		updateY();
		
	if (keyPressed("1"))
		swapWeapon(1);
	if (keyPressed("2"))
		swapWeapon(2);
		
	setRotation(angle_xz);
	setPosition(position);
	
	if (isColliding()){
		if (is_jumping){
			is_jumping = false;
			jump_target = 0.0;
			old_position[1] = floor(old_position[1]) + 0.001;
		}
		position = old_position;
		setPosition(position);
	}
	
	fp_obj.unhide();
}

function Player::enemyUpdate(epos, emove, eframe, eangle_xz){
	last_frame = current_frame;
	current_frame = eframe;
	if ((current_frame == SWAT_START_WALK || current_frame == SWAT_END_WALK) && last_frame != current_frame)
		step_fx.play();
	
	move = emove;
	position = epos;
	direction = [sin(eangle_xz), 0, cos(eangle_xz)];
	old_angle_xz = angle_xz;
	angle_xz = eangle_xz;
	angle_step = (angle_xz - old_angle_xz) / 20;
	setRotation(angle_xz);
	setPosition(position);
}

function Player::enemyInterpolate(){
	direction = [sin(angle_xz + angle_step), 0, cos(angle_xz + angle_step)];
	angle_xz += angle_step;
	setRotation(angle_xz);
	position += move;
	setPosition(position);
	
	last_frame = current_frame;
	var scalar = move[0] * direction[0] + move[2] * direction[2];
	var move_magn = move[0] * move[0] + move[2] * move[2];
	if (scalar < 0){
		current_frame--;
		if (current_frame == SWAT_START_WALK){
			current_frame = SWAT_END_WALK;
			step_fx.play();
		}
	} else if ((scalar == 0 && move_magn != 0) || (scalar > 0)){
		current_frame++;
		if (current_frame == SWAT_END_WALK){
			current_frame = SWAT_START_WALK;
			step_fx.play();
		}
	}
}