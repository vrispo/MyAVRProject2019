/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>

#include "player.s3d"
#include "Level.s3d"

#define MAX_PLAYERS 2

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

// TODO: put your global variables here

var local_matrix;

var my_level;

var aplayer = array(MAX_PLAYERS);

/* Camera globals */
var CamPos = [2.0, 3.0, 20.0]; 	// camera position

/* Light globals */
var Light0;
var PosL = [16.0, 100.0, 16.0];	// default light position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);



function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	

	// TODO: put your initialization code here
	my_level = level();
	my_level.init("level1.txt");
	local_matrix = my_level.__Get("level_matrix");
	
	aplayer[0] = player();
	aplayer[0].init([1,0,0],my_level);
	aplayer[0].setposition([2,0,2]);
}

function OnFrame()
{
	/* manage camera */
	CameraMoveMouse();
	
	aplayer[0].update(local_matrix);
	
	SceneBegin();

	//DrawGrid([0.5, 0.5, 0.5], 100);

	// TODO: put your drawing code here
	my_level.draw();
	aplayer[0].draw();
	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
