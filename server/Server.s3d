/* Include s3d symbols */
#include <Script3d.h>

#include "Player.s3d"
#include "Networking.s3d"
#include "Bullet.s3d"
#include "Level.s3d"

#define MAX_PLAYERS 4
#define MAX_BULLETS 40

#define CONNECT_REQ_PDU 0
#define CONNECT_RESP_PDU 1
#define DISCONNECT_REQ_PDU 2
#define ACK 3
#define POSITION_UPDATE_PDU 4
#define ENEMY_POSITION_PDU 5
#define ENEMY_DISCONNECTION_PDU 6
#define PING 7
#define POSITION_BULLET_PDU 8
#define DELETE_BULLET_PDU 9

#define OK 1
#define ERR -1

#define CONSOLE_Y_0 0.96
#define CONSOLE_X_0 0.02
#define CONSOLE_SPACING 0.04

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

// TODO: put your global variables here
var my_ip;
var net_channel;

var active_connection;
var online_player = array(4);
var init_pos = {[2, 0, 2], [2, 0, 30], [30, 0, 30], [30, 0, 2]};

var old_time_online_check;
var alive = array(4);

var bullets = array(MAX_BULLETS);
var old_time_bullet_sent;

var level_l;

function OnDownload(){
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}

function OnInit(params){
	// TODO: put your initialization code here
	ConsoleColor([0,255,0,1]);
	SetLocalDir("");	
	GLOBAL var TestDLL = CVmExternDLL( "../UtilityDll/Release/UtilityDll.dll" );
	TestDLL.__AddFunction( C_PCHAR , "get_IPaddress");
	my_ip = TestDLL.get_IPaddress();
	
	Outputln("\n");
	//Outputln(my_ip);
	
	level_l = Level();
	level_l.init("level1.txt");
	
	net_channel= NetCreateChannel(50023, "0.0.0.0", VR_NO_BLOCKING);
	active_connection = 0;
	for(var i = 0 ; i < MAX_PLAYERS ; i++){
		online_player[i] = Player();
		online_player[i].init(i, init_pos[i]);
		alive[i] = 0;
	}
	
	old_time_online_check = getTime();
	
	old_time_bullet_sent = getTime();
	bullets = array(MAX_BULLETS);
	for(var i = 0; i < MAX_BULLETS; i++){
		bullets[i] = bullet();
		bullets[i].init([0,0,0], [0,0,0], [0,0,0], 0, 1, false, -1);
	}
	
	SetTimeStep(1);
}

function OnFrame(){
	/* manage camera */
	
	//dead reckoning
	var current_time = getTime();
	if((current_time - old_time_online_check) > 5000){
		//controllo se c'è da mandare un messaggio di ping
		old_time_online_check = current_time;
		for(var i = 0 ; i < MAX_PLAYERS ; i++){
			if(online_player[i].isConnected() && (alive[i] <= 0)){
				var PDU = array(2);
				if(alive[i] == 0){
					//send ping to check if is dead
					alive[i] = -1;
					PDU[0] = PING;
					PDU[1] = i;
					mysend(online_player[i].__get("ip"), PDU);
				} else {
					//is dead
					online_player[i].Disconnection();
					active_connection--;
					outputln(str(i) + ": dead");
					alive[i] = 0;
					// send to the other online player that the player x is disconnected from the game 
					PDU[0] = ENEMY_DISCONNECTION_PDU;
					PDU[1] = i;
					
					for(var j=0 ; j < MAX_PLAYERS ; j++)
						if((j != i) && online_player[j].isConnected())
							mysend(online_player[j].__get("ip"), PDU);											
				}
			} else {
				alive[i] = 0;
			}
		}
	}
	
	//chiamo l'update dei proiettili a giro e controllo collisione
	for (var i = 0; i < MAX_BULLETS; i++){
		if(bullets[i].isAlive()){
			bullets[i].update();	
			if (bullets[i].isCollidingBBox(level_l)){
				// Veronica, creami un bel pacchetto di morte del proiettile, ed eliminalo dal buffer
				var PDU = array(3);
				PDU[0] = DELETE_BULLET_PDU;
				PDU[1] = bullets[i].__get("player_index");
				PDU[2] = bullets[i].__get("seq_number");
				
				for(var j = 0 ; j < MAX_PLAYERS ; j++){
					if(online_player[j].isConnected())
						mysend(online_player[j].__get("ip"), PDU);					
				}
				
				bullets[i].__set("alive", false);
			}
		}
	}
	
	//guardo se devo fare il resend periodico dei proiettili
	current_time = getTime();
	if((current_time - old_time_bullet_sent) > 500){
		for(var i = 0; i < MAX_BULLETS; i++){
			if(bullets[i].isAlive()){
				var PDU = array(7);
				PDU[0] = POSITION_BULLET_PDU;
				PDU[1] = bullets[i].__get("position");
				PDU[2] = bullets[i].__get("direction");
				PDU[3] = bullets[i].__get("col");
				PDU[4] = bullets[i].__get("player_index");
				PDU[5] = bullets[i].__get("gun");
				PDU[6] = bullets[i].__get("seq_number");
				
				for(var j = 0 ; j < MAX_PLAYERS ; j++){
					if(online_player[j].isConnected())
						mysend(online_player[j].__get("ip"), PDU);					
				}
			}
		}		
	}	
	
	SceneBegin();

	// TODO: put your drawing code here
	ConsoleText(CONSOLE_X_0, CONSOLE_Y_0, "Server IP address: " + my_ip);
	for(var i=0 ; i < MAX_PLAYERS ; i++){
		ConsoleText(CONSOLE_X_0, (CONSOLE_Y_0 - 0.06 - CONSOLE_SPACING*i), online_player[i].toString());
	}
	SceneEnd();
}

function DownloadReady(RequestID){
	// TODO
}

function OnTimer(){
	// TODO:
	var address1 = "................";
	var received_data = NetVarReceiveFrom(net_channel,&address1);
	
	if(received_data != NULL){
		if(received_data[0] == CONNECT_REQ_PDU){			
			var id_req = received_data[1];
			var ip_req = received_data[2];
			
			var PDU = array(5);
			if(active_connection < MAX_PLAYERS){
				//find the first available place and give an OK response
				var i = 0;
				while(online_player[i].isConnected())
					i++;
				active_connection++;
				alive[i] = 1;
				online_player[i].connection(id_req, ip_req);
				outputln(online_player[i].toString());
				
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = OK; //response
				PDU[2] = my_ip;
				PDU[3] = i; //index
				PDU[4] = online_player[i].getStartPosition(); //pos
				mysend(ip_req, PDU);
			}
			else{
				//send no connection available response
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = ERR;
				PDU[2] = my_ip;
				PDU[3] = null; //index
				PDU[4] = null; //pos
				mysend(ip_req, PDU); 
			}
			var recv = false;
			var old_time = getTime();//returns time in milliseconds
			do{		
				var current_time = getTime();
		    	if(current_time-old_time>1000){
		    		mysend(ip_req, PDU);
		    		old_time = getTime();
				} 
				received_data = NetVarReceiveFrom(net_channel, &address1);	
				if(received_data != null)
					if(received_data[0] == ACK)
						recv = true;				
		    }while(!recv);							
		}
		/* disconnection of the client */
		if(received_data[0] == DISCONNECT_REQ_PDU){
			var ip_req = received_data[1];
			var id_req = received_data[2];
			var index_req = received_data[3];
			outputln("disconnection request " + ip_req + " " + id_req);
			
			if((online_player[index_req].isConnected()) && (online_player[index_req].__Get("id") == id_req)){
				online_player[index_req].Disconnection();
				active_connection--;
				alive[index_req] = 0;
				outputln("disconnected");			
			}
			
			/* send ack */
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(ip_req, PDU); 	
			
			/* send to the other online player that the player x is disconnected from the game */
			PDU[0] = ENEMY_DISCONNECTION_PDU;
			PDU[1] = index_req;
			
			for(var i=0 ; i < MAX_PLAYERS ; i++){
				if((i != index_req) && online_player[i].isConnected()){
					mysend(online_player[i].__get("ip"), PDU);
					/*aspetto l'ack 
					var recv = false;
					var old_time = getTime();//returns time in milliseconds
					do{		
						var current_time = getTime();
				    	if(current_time-old_time>1000){
				    		mysend(online_player[i].__get("ip"), PDU);
				    		old_time = getTime();
						} 
						received_data = NetVarReceiveFrom(net_channel, &address1);	
						if(received_data != null)
							if(received_data[0] == ACK)
								recv = true;				
				    }while(!recv);	*/				
				}
			}			
		}
		if(received_data[0] == POSITION_UPDATE_PDU){
			var ip_req = received_data[1];
			var index = received_data[2];
			var position = received_data[3];
			var move = received_data[4];
			var frame = received_data[5];
			var angle = received_data[6];
			var gun = received_data[7];
			
			if(online_player[index].__get("ip") != ip_req){
				/* send ack */
				var PDU = array(2);
				PDU[0] = ACK;
				PDU[1] = ERR;
				mysend(ip_req, PDU);			
			}
			else{
				//outputln("received position from " + online_player[index].__get("id"));
				alive[index] = 1;
				/* send ack */
				var PDU = array(2);
				PDU[0] = ACK;
				PDU[1] = OK;
				mysend(ip_req, PDU);
				
				/*send the position to the other players */
				PDU = array(7);
				PDU[0] = ENEMY_POSITION_PDU;
				PDU[1] = index;
				PDU[2] = position;
				PDU[3] = move;
				PDU[4] = frame;
				PDU[5] = angle;
				PDU[6] = gun;
				
				for(var i=0 ; i < MAX_PLAYERS ; i++){
					if((i != index) && online_player[i].isConnected()){
						mysend(online_player[i].__get("ip"), PDU);
						outputln("sended position to " + online_player[i].__get("id"));
						/*aspetto l'ack 
						var recv = false;
						var old_time = getTime();//returns time in milliseconds
						do{		
							var current_time = getTime();
					    	if(current_time-old_time>1000){
					    		mysend(online_player[i].__get("ip"), PDU);
					    		old_time = getTime();
							}
							received_data = NetVarReceiveFrom(net_channel, &address1);	
							if(received_data != null)
								if(received_data[0] == ACK)
									recv = true;				
					    }while(!recv);	*/			
					}
				}
			}						
		}
		if(received_data[0] == PING){
			alive[received_data[1]] = 1;
		}
		if(received_data[0] == POSITION_BULLET_PDU){
			var pos = received_data[1];
			var dir = received_data[2];
			var col = received_data[3];
			var ind = received_data[4];
			var bullet = received_data[5];
			var seq_number = received_data[6];
			
			/* send ack */
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(online_player[ind].__get("ip"), PDU);
			
			outputln("received bullet from: "+ str(ind) + " seq_num: " + str(seq_number)+ " pos: " + str(pos[0]) + " " + str(pos[1]) + " " + str(pos[2]));
			
			//il server si salva il proiettile
			var i = 0;
			for(i = 0 ; i < MAX_BULLETS ;  i++){
				if(!bullets[i].isAlive())
					break;
			}
			if(i != MAX_BULLETS){
				bullets[i].init(pos, dir, col, ind, bullet, true, seq_number);
			}
			//mando il proiettile agli altri
			for(var i=0 ; i < MAX_PLAYERS ; i++){
				if((i != ind) && online_player[i].isConnected()){
					mysend(online_player[i].__get("ip"), received_data);
				}
			}
		}		
	}
}

function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit(){
	// TODO: put your cleanup code here
}