/* Include s3d symbols */
#include <Script3d.h>

#include "Player.s3d"
#include "Networking.s3d"
#include "Bullet.s3d"
#include "Level.s3d"

#define MAX_PLAYERS 4
#define MAX_BULLETS 40

#define CONNECT_REQ_PDU 0
#define CONNECT_RESP_PDU 1
#define DISCONNECT_REQ_PDU 2
#define ACK 3
#define POSITION_UPDATE_PDU 4
#define ENEMY_POSITION_PDU 5
#define ENEMY_DISCONNECTION_PDU 6
#define PING 7
#define POSITION_BULLET_PDU 8
#define DELETE_BULLET_PDU 9
#define KILL_PDU 10
#define SCORE_PDU 11
#define KILL_ACK_PDU 12

#define OK 1
#define ERR -1

#define CONSOLE_Y_0 0.96
#define CONSOLE_X_0 0.02
#define CONSOLE_SPACING 0.04

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

// TODO: put your global variables here
var my_ip;
var net_channel;

var active_connection;
var online_player = array(MAX_PLAYERS);
var init_pos = {[2, 0, 2], [2, 0, 30], [30, 0, 30], [30, 0, 2]}; 

var score = array(MAX_PLAYERS);
var old_time_score_sent;

var old_time_online_check;
var alive = array(4);

var bullets = array(MAX_BULLETS);
var old_time_bullet_sent;

var level_l;

function OnDownload(){
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}

function OnInit(params){
	// TODO: put your initialization code here
	ConsoleColor([0,255,0,1]);
	SetLocalDir("");	
	
	//Download the dll and retrieve my IPV4 address
	GLOBAL var TestDLL = CVmExternDLL( "../UtilityDll/Release/UtilityDll.dll" );
	TestDLL.__AddFunction( C_PCHAR , "get_IPaddress");
	my_ip = TestDLL.get_IPaddress();
	
	//Take the map and initialize the level (used to check wall collision of the bullets)
	level_l = Level();
	level_l.init("level1.txt");
	
	net_channel= NetCreateChannel(SERVER_PORT, "0.0.0.0", VR_NO_BLOCKING);
	active_connection = 0;
	
	//Initialize the players
	for(var i = 0 ; i < MAX_PLAYERS ; i++){
		online_player[i] = Player();
		online_player[i].init(i, init_pos[i]);
		alive[i] = 0;
		score[i] = 0;
	}
	
	old_time_online_check = getTime();
	old_time_score_sent = getTime();	
	old_time_bullet_sent = getTime();
	
	//Initialize the bullets
	bullets = array(MAX_BULLETS);
	for(var i = 0; i < MAX_BULLETS; i++){
		bullets[i] = bullet();
		bullets[i].init([0,0,0], [0,0,0], [0,0,0], 0, 1, false, -1);
	}
	
	SetTimeStep(1);
}

function OnFrame(){
	
	SceneBegin();
	
	//Periodic check of the still alive players
	var current_time = getTime();
	if((current_time - old_time_online_check) > 5000){
		//Check if I have to send some ping message
		old_time_online_check = current_time;
		for(var i = 0 ; i < MAX_PLAYERS ; i++){
			//If the player in the fraction of time have sended some message to the server alive[index] is greater than 0
			if(online_player[i].isConnected() && (alive[i] <= 0)){ 
				var PDU = array(2);
				if(alive[i] == 0){
					//Send ping to check if is dead
					alive[i] = -1;
					PDU[0] = PING;
					PDU[1] = i;
					mysend(online_player[i].__get("ip"), PDU);
				} else {
					//Is ufficially dead so I disconnected him
					online_player[i].Disconnection();
					active_connection--;
					outputln(str(i) + ": dead");
					alive[i] = 0;
					
					//Send a ENEMY_DISCONNECTION PDU to online players to notify
					PDU[0] = ENEMY_DISCONNECTION_PDU;
					PDU[1] = i;
					
					for(var j=0 ; j < MAX_PLAYERS ; j++)
						if((j != i) && online_player[j].isConnected())
							mysend(online_player[j].__get("ip"), PDU);											
				}
			} else {
				//Reset the alive vector
				alive[i] = 0;
			}
		}
	}

	//Call the bullet update and check the wall collision
	level_l.draw();
	
	for (var i = 0; i < MAX_BULLETS; i++){
		if(bullets[i].isAlive()){
			bullets[i].update();
			var bull_pos = bullets[i].__get("position");
			var t_lvl = level_l.__get("level_obj");
			foreach (var t in t_lvl)
				//Check if is colliding or is out and notify it to online players
				if (bullets[i].obj.isCollidingBBox(t) || bull_pos[0] >= num_rows || bull_pos[0] < 0 || bull_pos[2] >= num_columns || bull_pos[2] < 0 ){
					var PDU = array(3);
					PDU[0] = DELETE_BULLET_PDU;
					PDU[1] = bullets[i].__get("player_index");
					PDU[2] = bullets[i].__get("seq_number");
					
					for(var j = 0 ; j < MAX_PLAYERS ; j++){
						if(online_player[j].isConnected())
							mysend(online_player[j].__get("ip"), PDU);					
					}
					
					bullets[i].__set("alive", false);
					break;
				}
		}
	}
	
	//Periodic resending of the active bullets
	current_time = getTime();
	if((current_time - old_time_bullet_sent) > 500){
		for(var i = 0; i < MAX_BULLETS; i++){
			if(bullets[i].isAlive()){
				var PDU = array(7);
				PDU[0] = POSITION_BULLET_PDU;
				PDU[1] = bullets[i].__get("position");
				PDU[2] = bullets[i].__get("direction");
				PDU[3] = bullets[i].__get("col");
				PDU[4] = bullets[i].__get("player_index");
				PDU[5] = bullets[i].__get("gun");
				PDU[6] = bullets[i].__get("seq_number");
				
				for(var j = 0 ; j < MAX_PLAYERS ; j++){
					if(online_player[j].isConnected())
						mysend(online_player[j].__get("ip"), PDU);					
				}
			}
		}		
	}
	
	//Periodic sending of the score
	current_time = getTime();
	if((current_time - old_time_score_sent) > 500){
		var ids = array(MAX_PLAYERS);
		for(var i = 0 ; i < MAX_PLAYERS; i++){
			if(online_player[i].isConnected())
				ids[i] = online_player[i].__get("id");
			else{
				ids[i] = "not online";
				score[i] = 0;
				}
		}
		var PDU = array(3);
		PDU[0] = SCORE_PDU;
		PDU[1] = score;
		PDU[2] = ids;
		
		for(var j = 0 ; j < MAX_PLAYERS ; j++)
			if(online_player[j].isConnected())
				mysend(online_player[j].__get("ip"), PDU);			
	}
	
	// TODO: put your drawing code here
	ConsoleText(CONSOLE_X_0, CONSOLE_Y_0, "Server IP address: " + my_ip);
	for(var i=0 ; i < MAX_PLAYERS ; i++){
		ConsoleText(CONSOLE_X_0, (CONSOLE_Y_0 - 0.06 - CONSOLE_SPACING*i), online_player[i].toString());
	}
	SceneEnd();
}

function DownloadReady(RequestID){
	// TODO
}

function OnTimer(){
	var address1 = "................";
	var received_data = NetVarReceiveFrom(net_channel,&address1);
	
	if(received_data != NULL){
		//Received a connection request PDU
		if(received_data[0] == CONNECT_REQ_PDU){			
			var id_req = received_data[1];
			var ip_req = received_data[2];
			
			var PDU = array(5);
			
			//Check if I have already received a request from him
			var already_exist = false;
			for(var i = 0; i < MAX_PLAYERS ; i++){
				if((online_player[i].isConnected()) && (online_player[i].__Get("id") == id_req) && (online_player[i].__Get("ip") == ip_req)){
					already_exist = true;
					PDU[0] = CONNECT_RESP_PDU;
					PDU[1] = OK;
					PDU[2] = my_ip; //Server ip
					PDU[3] = i; //Index
					PDU[4] = online_player[i].getStartPosition(); //Initial spawn position
					mysend(ip_req, PDU);					
				}
			}
			
			if(!already_exist && (active_connection < MAX_PLAYERS)){
				//Find the first available place and send an OK response with the info
				var i = 0;
				while(online_player[i].isConnected())
					i++;
				active_connection++;
				alive[i] = 1;
				online_player[i].connection(id_req, ip_req);
				outputln(online_player[i].toString());
				
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = OK;
				PDU[2] = my_ip; //Server ip
				PDU[3] = i; //Index
				PDU[4] = online_player[i].getStartPosition(); //Initial spawn position
				mysend(ip_req, PDU);
			}
			else{
				//Send no game connection available response
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = ERR;
				PDU[2] = my_ip;
				PDU[3] = null;
				PDU[4] = null;
				mysend(ip_req, PDU); 
			}							
		}
		
		//Received a disconnection PDU
		if(received_data[0] == DISCONNECT_REQ_PDU){
			var ip_req = received_data[1];
			var id_req = received_data[2];
			var index_req = received_data[3];
			outputln("disconnection request " + ip_req + " " + id_req);
			
			if((online_player[index_req].isConnected()) && (online_player[index_req].__Get("id") == id_req)){
				online_player[index_req].Disconnection();
				active_connection--;
				alive[index_req] = 0;
				outputln("disconnected");			
			}
			
			//Send the ack
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(ip_req, PDU); 	
			
			//Notify the disconnection to online players
			PDU[0] = ENEMY_DISCONNECTION_PDU;
			PDU[1] = index_req;
			
			for(var i=0 ; i < MAX_PLAYERS ; i++){
				if((i != index_req) && online_player[i].isConnected()){
					mysend(online_player[i].__get("ip"), PDU);			
				}
			}			
		}
		
		//Received a player position PDU
		if(received_data[0] == POSITION_UPDATE_PDU){
			var ip_req = received_data[1];
			var index = received_data[2];
			var position = received_data[3];
			var move = received_data[4];
			var frame = received_data[5];
			var angle = received_data[6];
			var gun = received_data[7];
			
			if(online_player[index].__get("ip") != ip_req){
				//Send the ack
				var PDU = array(2);
				PDU[0] = ACK;
				PDU[1] = ERR;
				mysend(ip_req, PDU);			
			}
			else{
				alive[index] = 1;
				//Send the ack
				var PDU = array(2);
				PDU[0] = ACK;
				PDU[1] = OK;
				mysend(ip_req, PDU);
				
				//Notify the position update to other online players
				PDU = array(7);
				PDU[0] = ENEMY_POSITION_PDU;
				PDU[1] = index;
				PDU[2] = position;
				PDU[3] = move;
				PDU[4] = frame;
				PDU[5] = angle;
				PDU[6] = gun;
				
				for(var i=0 ; i < MAX_PLAYERS ; i++)
					if((i != index) && online_player[i].isConnected())
						mysend(online_player[i].__get("ip"), PDU);
			}						
		}
		
		//Received a ping message
		if(received_data[0] == PING){
			alive[received_data[1]] = 1;
		}
		
		//Received a position bullet PDU
		if(received_data[0] == POSITION_BULLET_PDU){
			var pos = received_data[1];
			var dir = received_data[2];
			var col = received_data[3];
			var ind = received_data[4];
			var bullet = received_data[5];
			var seq_number = received_data[6];
			
			//Send the ack
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(online_player[ind].__get("ip"), PDU);
			
			//Save the new bullet in a free position of the array
			var i = 0;
			for(i = 0 ; i < MAX_BULLETS ;  i++){
				if(!bullets[i].isAlive())
					break;
			}
			if(i != MAX_BULLETS){
				bullets[i].init(pos, dir, col, ind, bullet, true, seq_number);
			}
			
			//Notify the new bullet info to online players
			for(var i=0 ; i < MAX_PLAYERS ; i++)
				if((i != ind) && online_player[i].isConnected())
					mysend(online_player[i].__get("ip"), received_data);
		}
		
		//Received a delete bullet PDU
		if(received_data[0] == DELETE_BULLET_PDU){
			var p_index = received_data[1];
			var seq_n = received_data[2];
			
			//Send the ack
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(address1, PDU);
			
			//Set the corresponding bullet as not alive and notify to other online players			
			for(var i = 0 ; i < MAX_BULLETS ; i++){
				if(bullets[i].isAlive() && (bullets[i].__get("player_index") == p_index) && (bullets[i].__get("seq_number") == seq_n)){
					bullets[i].__set("alive", false);
					for(var j=0 ; j < MAX_PLAYERS ; j++)
						if(online_player[j].isConnected())
							mysend(online_player[j].__get("ip"), received_data);					
				}
			}
		}
		
		//Received a kill PDU
		if (received_data[0] == KILL_PDU){
			received_data[0] = DELETE_BULLET_PDU;
			var p_index = received_data[1];
			var seq_n = received_data[2];
			
			//Update the score
			score[p_index]++;			
			
			//Set the corresponding bullet as not alive and notify to other online players to delete the bullet
			for(var i = 0 ; i < MAX_BULLETS ; i++){
				if(bullets[i].isAlive() && (bullets[i].__get("player_index") == p_index) && (bullets[i].__get("seq_number") == seq_n)){
					bullets[i].__set("alive", false);
					for(var j=0 ; j < MAX_PLAYERS ; j++)
						if(online_player[j].isConnected())
							mysend(online_player[j].__get("ip"), received_data);				
				}
			}
			
			//Calculate spawn position for the killed player and send to him		
			var pos =[(rand(num_rows-3)+1.5), 0, (rand(num_columns-3)+1.5)];
			if(val(f[pos[0]][pos[2]]) != 0)
				pos[1] = val(f[pos[0]][pos[2]]) + 0.001;
			
			var PDU = array(2);
			PDU[0] = KILL_ACK_PDU;
			PDU[1] = pos;
			mysend(address1, PDU);
		}	
	}
}

function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit(){
	// TODO: put your cleanup code here
}