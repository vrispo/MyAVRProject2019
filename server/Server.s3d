/* Include s3d symbols */
#include <Script3d.h>

#include "Player.s3d"
#include "Networking.s3d"

#define MAX_PLAYERS 4

#define CONNECT_REQ_PDU 0
#define CONNECT_RESP_PDU 1
#define DISCONNECT_REQ_PDU 2
#define ACK 3

#define OK 1
#define ERR -1

#define CONSOLE_Y_0 0.96
#define CONSOLE_X_0 0.02
#define CONSOLE_SPACING 0.04

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

// TODO: put your global variables here
var my_ip;
var net_channel;

var active_connection;
var online_player = array(4);
var init_pos = {[2, 0, 2], [2, 0, 30], [30, 0, 30], [30, 0, 2]};


function OnDownload(){
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}

function OnInit(params){
	// TODO: put your initialization code here
	ConsoleColor([0,255,0,1]);
	SetLocalDir("");	
	GLOBAL var TestDLL = CVmExternDLL( "../UtilityDll/Release/UtilityDll.dll" );
	TestDLL.__AddFunction( C_PCHAR , "get_IPaddress");
	my_ip = TestDLL.get_IPaddress();
	
	Outputln("\n");
	//Outputln(my_ip);
	
	net_channel= NetCreateChannel(50023,"0.0.0.0",VR_NO_BLOCKING);
	active_connection = 0;
	for(var i=0 ; i<MAX_PLAYERS ; i++){
		online_player[i] = Player();
		online_player[i].init(i, init_pos[i]);
	}
}

function OnFrame(){
	/* manage camera */
	SceneBegin();

	// TODO: put your drawing code here
	ConsoleText(CONSOLE_X_0, CONSOLE_Y_0, "Server IP address: " + my_ip);
	for(var i=0 ; i < MAX_PLAYERS ; i++){
		ConsoleText(CONSOLE_X_0, (CONSOLE_Y_0 - 0.06 - CONSOLE_SPACING*i), online_player[i].toString());
	}
	SceneEnd();
}

function DownloadReady(RequestID){
	// TODO
}

function OnTimer(){
	// TODO:
	var address1 = "................";
	var received_data = NetVarReceiveFrom(net_channel,&address1);
	
	if(received_data != NULL){
		if(received_data[0] == CONNECT_REQ_PDU){
			var id_req = received_data[1];
			var ip_req = received_data[2];
			
			if(active_connection < MAX_PLAYERS){
				//find the first available place and give an OK response
				var i = 0;
				while(online_player[i].isConnected() == true)
					i++;
				active_connection++;
				online_player[i].connection(id_req, ip_req);
				outputln(online_player[i].toString());
				
				var PDU = array(5);
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = OK; //response
				PDU[2] = my_ip;
				PDU[3] = i; //index
				PDU[4] = online_player[i].getStartPosition(); //pos
				mysend(ip_req, PDU);
			}
			else{
				//send no connection available response
				var PDU = array(5);
				PDU[0] = CONNECT_RESP_PDU;
				PDU[1] = ERR;
				PDU[2] = my_ip;
				PDU[3] = null; //index
				PDU[4] = null; //pos
				mysend(ip_req, PDU); 
			}
		}
		
		if(received_data[0] == DISCONNECT_REQ_PDU){
			var ip_req = received_data[1];
			var id_req = received_data[2];
			var index_req = received_data[3];
			
			if((online_player[index_req].isConnected == true) && (online_player[index_req].__Get("id") == id_req))
				online_player[index_req].Disconnection();
			
			/* send ack */
			var PDU = array(2);
			PDU[0] = ACK;
			PDU[1] = OK;
			mysend(ip_req, PDU); 		
		}
	}
}

function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit(){
	// TODO: put your cleanup code here
}